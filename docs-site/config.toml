# The URL the site will be built for
base_url = "https://loco.rs"
title = "Loco"
description = "Loco is a productivity-first web and service framework in Rust"


# Whether to automatically compile all Sass files in the sass directory
compile_sass = true

# Whether to generate a feed file for the site
generate_feed = true

# When set to "true", the generated HTML files are minified.
minify_html = false

# The taxonomies to be rendered for the site and their configuration.
taxonomies = [
  { name = "authors" }, # Basic definition: no feed or pagination
]


# Whether to build a search index to be used later on by a JavaScript library
build_search_index = true

[markdown]
# Whether to do syntax highlighting
# Theme can be customised by setting the `highlight_theme` variable to a theme supported by Zola
highlight_theme = "css"
highlight_code = true
highlight_themes_css = [
  { theme = "OneHalfDark", filename = "syntax-theme-dark.css" },
  { theme = "OneHalfLight", filename = "syntax-theme-light.css" },
]
[extra]
# Put all your custom variables here

# Menu items
[[extra.menu.main]]
name = "Docs"
section = "docs"
url = "/docs/getting-started/tour/"
weight = 10

[[extra.menu.main]]
name = "Blog"
section = "blog"
url = "/blog/"
weight = 20

[[extra.menu.main]]
name = "Casts"
section = "casts"
url = "/casts/"

[[extra.menu.social]]
name = "Twitter"
pre = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-twitter"><path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path></svg>'
url = "https://twitter.com/jondot"
weight = 10

[[extra.menu.social]]
name = "GitHub"
pre = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-github"><path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path></svg>'
url = "https://github.com/loco-rs/loco"
post = "v0.1.0"
weight = 20


[[extra.homepage.features]]
name = "Models"
description = 'Empower the 1-person team. Service, data, emails, background jobs, tasks, CLI to drive it,everything is included.'
example = '''```rust
impl Model {
  pub async fn find_by_email(
    db: &DatabaseConnection, 
    email: &str)
  -> ModelResult<Self> {
    users::Entity::find().filter(
         query::condition().eq(users::Column::Email, email).build()
      )
      .one(db).await?
      .ok_or_else(|| ModelError::EntityNotFound)
  }
}
```
'''

[[extra.homepage.features]]
name = "Controllers"
description = ' Empower the 1-person team. Service,  data, emails, background jobs, tasks, CLI to drive it,everything is included.'
example = '''```rust
pub async fn list(State(ctx): State<AppContext>) -> Result<Response> {
  format::json(Entity::find().all(&ctx.db).await?)
}

pub fn routes() -> Routes {
  Routes::new()
    .prefix("users")
    .add("/", get(list))
}



```
'''

[[extra.homepage.features]]
name = "Views"
description = ' Empower the 1-person team. Service, data, emails, background jobs, tasks, CLI to drive it,everything is included.'
example = '''```rust
pub fn home(v: &impl ViewRenderer) -> Result<Response> {
  format::render().view(v, "home/hello.html", json!({}))
}



```
'''

[[extra.homepage.features]]
name = "Background Jobs"
description = ' Empower the 1-person team. Service, data, emails, background jobs, tasks, CLI to drive it,everything is included.'
example = '''```rust
pub fn routes() -> Routes {
  Routes::new()
    .prefix("guide")
    .add("/", get(hello))
    .add("/echo", post(echo))
}
```
'''
